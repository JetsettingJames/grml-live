Documentation for module szstoolbox.

Classes in szstoolbox:

Error(Exception):
	"""A general Exception which can be used/inherited 
	   from any module""" 

msg:
""" all functions to give messages to whatever """
	(__init__)
	usage:	""" prints a helpmessage to stdout
                    Usage: msg.usage([modulename [, moduletext]])
		    Returns: nothing """
		    
	help:	""" prints debugmessages if lvl >= debuglvl
		    Usage: debug(message, lvl, source [, x=0])
		    Returns: cache if x != 0 else True """
		    
	debug:	""" prints debugmessages if lvl >= debuglvl
		    Usage: debug(message, lvl, source [, x=0])
		    Returns: cache if x != 0 else True """
		    
	say:	""" parses the languagefiles and give the right text
		    Usage: msg.say(dict, msgcode)
		    Returns: the message in right language """
		    
	log:	""" sends messages to the configured logfile
		    should only used by msg.debug """


cfg:
""" functions for reading and writing the config """
	(__init__)
	settings:	""" returns the actual settings
			    Usage: cfg.settings()
			    Returns: ['value','group','cfgF path'] """
		      
	read:		""" reads the configurationfile and returns the values
			    Usage: cfg.read(value)
			    Returns: whats inside value """
			    
	write:		""" this function does nothing at the moment
			    in future it writes into the configfiles """


xtra:
""" some extra functions like counters """
	(__init__)
	countadd:	""" counter for addition
			    Usage: xtra.countadd([y [,x ]])
			    where y (standard 1) is the value to add to x
			    Returns: the new value of x """
			    
	countsub:	""" counter for substraction
			    Usage: xtra.countsub([y ],x ]),
			    where y (standard 1) is the value to substract
			    from x
			    Returns: the new value of x """
			    
	strrotate:	""" trying to build a string rotator
			    Usage: xtra.strrotate(str, length)
			    where 'str' is the String to rotate in 'length' units
			    Returns: part of str """
			    ATTENTION: this function is untested, bugreports
			    and suggestions are desired
			    
	savevar:	""" saves variables in the cache, so your module
			    can use it later again...
			    Usage: xtra.savevar(name, value)
			    Returns: Boolean """
			    
	getvar: 	""" returns the value of name
			    Usage: xtra.getvar(name)
			    Returns: value of name """
			    
	delvar: 	""" deletes the variable from list
			    Usage: xtra.delvar(name)
			    Returns: Boolean """


Global variables in szstoolbox:

global cfgF:			name of configuration file
global langF:			name of language file
global langmod:			alias for imported language module
global logfile:			name of log file
global language:		name of the language (eg 'en' or 'de')
global accuracy:		accuracy (positions after decimal point)
global interval:		renew time
global debuglevel:		debuglevel
global cfgG:			cfg('global')
global starttime:		secs since epoch where the script was started
global kernel_version:	Linux Kernel version
