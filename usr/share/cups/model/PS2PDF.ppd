*PPD-Adobe: "4.3"
*% Adobe Systems PostScript(R) Printer Description File
*% For "DANKA PostScript to PDF Conversion Filter". Useful only for 
*% the  "pdf:/"-backend in CUPS on grml system
*% Date: 28-02-2004, Kurt Pfeifle (-kp-). Based on the INFOSTRM.PPD by Heinz Pieper.
*% Latest change: Sun Sep 11 12:54:25 CEST 2005 [mika]
*% ************************************************************************
*%                         D I S C L A I M E R
*% ************************************************************************
*% The above statement indicates that this PPD was written using the 
*% Adobe PPD File Format Specification 4.3, but does not intend to imply 
*% approval and acceptance by Adobe Systems, Inc. 
*% 
*% This PPD comes with no guarantee of any kind. Support by its authors, by
*% Knoppix, by Danka Deutschland or by Heise Verlag is not available.
*% Feedback is appreciated, but no response time is guaranteed:
*% Kurt Pfeifle <kpfeifle@danka.de>
*%              <pfeifle@kde.org>

*% ************************************************************************
*%        C O N F O R M A N C E  T E S T  R E S U L T S
*% ************************************************************************
*% This PPD has been tested with the Easy Software Products PPD test tool.
*% This tool, 'testcupsppd' has discovered no deviation from the Adobe PPD
*% Specification. 'testcupsppd' is the best tool known to the author for 
*% this purpose....

*% ************************************************************************
*%             INTERNAL INFORMATION
*% ************************************************************************
*% InternalVersion: "07.00.02"
*% Platform(s) Supported: "Windows 95" "Windows 98" "Windows Me"
*%                        "Windows NT" "Windows 2000" "Windows XP"
*%                        "Macintosh"
*%                        "Linux" "AIX" "HP-UX" "NetBSD" "FreeBSD" "OpenBSD" 
*%                        "Mac OS X" "Irix" "Solaris" "Digital UNIX" "OSF/1" 
*%                        "Compaq Tru64 UNIX" "CUPS" "ESP PrintPro" 

*% ************************************************************************
*%             M O D I F I C A T I O N    I N F O R M A T I O N
*% ************************************************************************
*% 28-02-2004 Initial design and testing

*% ************************************************************************
*%             V E R S I O N    I N F O R M A T I O N
*% ************************************************************************
*FormatVersion: "4.3"
*FileVersion: 	"1.0"
*PSVersion: 	"(3010.103) 0"
*% InternalVersion: "07.00.02"

*% ************************************************************************
*%             N A M E    I N F O R M A T I O N
*% ************************************************************************
*Product: 	"(DANKA PS2PDF Conversion)"
*Manufacturer: 	"DANKA Digital Product Development"
*ModelName: 	"DANKA PS2PDF"
*NickName: 	"DANKA PS2PDF Conversion"
*ShortNickName: "DANKA PS2PDF"
*PCFileName: 	"PS2PDF.PPD"

*% ************************************************************************
*%            L A N G U A G E    I N F O R M A T I O N
*% ************************************************************************
*LanguageVersion:	German
*LanguageEncoding:	ISOLatin1
*LanguageLevel:		"3"

*% ************************************************************************
*%            C U P S   F I L T E R   I N F O R M A T I O N
*% ************************************************************************
*% *cupsFilter:	"application/vnd.cups-postscript 0 dankapdfmark"
*% *cupsFilter:	"application/vnd.danka-pdfmarked 0 - "
*% the above lines are currently not used (may change in a later version
*% of the 'DANKA PS2PDF Conversion').

*% *************************************************************************
*%    G E N E R A L   I N F O R M A T I O N   A N D   D E F A U L T S
*% *************************************************************************
*ColorDevice: True
*DefaultColorSpace: RGB
*DefaultResolution: 600dpi
*FreeVM: "5509724"
*Protocols: BCP TBCP
*FileSystem: True
*?FileSystem: "(True) == flush"
*Throughput: "110"

*DefaultOutputOrder:  Normal
*OutputOrder Normal: " "

*Password: "()"
*ExitServer: "
  count 0 eq
  {  false } { true exch startjob } ifelse
  not
  {
    %  if no password or not valid
    (WARNING : Cannot modify initial VM.) =
    (Missing or invalid password.) =
    (Please contact the author of this software.) = flush
    quit
  } if
"
*End

*% ************************************************************************
*%             H A L F T O N E    I N F O R M A T I O N
*% ************************************************************************
*ContoneOnly: False
*DefaultHalftoneType: 1
*ScreenFreq: "60.0"
*ScreenAngle: "45.0"
*DefaultScreenProc: Dot
*ScreenProc Dot: "
  {abs exch abs 2 copy add 1 gt {1 sub dup mul exch 1 sub dup mul add 1 sub }
  {dup mul exch dup mul add 1 exch sub } ifelse }
"
*End

*ScreenProc Line: "
  { exch pop abs neg } bind
"
*End

*ScreenProc Ellipse: "
  {abs exch abs 2 copy mul exch 4 mul add 3 sub dup 0 lt 
  { pop dup mul exch .75 div dup mul add 4 div 1 exch sub } 
  { dup 1 gt { pop 1 exch sub dup mul exch 1 exch sub .75 div dup mul add 4 div 1 sub } 
  { .5 exch sub exch pop exch pop } ifelse  } ifelse } bind
"
*End

*ScreenProc Cross: "
  { abs exch abs 2 copy gt { exch } if pop neg } bind
"
*End

*DefaultTransfer: Null
*Transfer Null: "{ } bind"
*Transfer Null.Inverse: "{ 1 exch sub } bind"

*% ************************************************************************
*%              C U S T O M   P A G E   S I Z E 
*% ************************************************************************
*NonUIOrderDependency: 50.0 AnySetup *CustomPageSize
*MaxMediaWidth: "3240"
*MaxMediaHeight: "3240"
*CenterRegistered: True
*HWMargins: 10 10 10 10
*LeadingEdge Forced: ""
*DefaultLeadingEdge: Forced
*VariablePaperSize: True
*ParamCustomPageSize Width: 1 points 283 842
*ParamCustomPageSize Height: 2 points 420 1225
*ParamCustomPageSize WidthOffset: 3 points 0 0
*ParamCustomPageSize HeightOffset: 4 points 0 0
*ParamCustomPageSize Orientation: 5 int 0 3

*CustomPageSize True: "pop pop pop <</PageSize [5 -2 roll] /ImagingBBox null
 /DeferredMediaSelection true /Policies <</PageSize 2>> >> setpagedevice"
*End

*% ************************************************************************
*%             P A P E R    H A N D L I N G
*% ************************************************************************
*% make the correct rotation Heinz Pieper 10-05-99 
*LandscapeOrientation: Plus90

*OpenUI *InputSlot: PickOne
*DefaultInputSlot: PickOne
*InputSlot OnlyOne: ""
*CloseUI: *InputSlot

*OpenUI *PageSize: PickOne
*OrderDependency: 30 AnySetup *PageSize
*DefaultPageSize: A4
*PageSize Letter/USBrief: "
   currentscreen
   2 dict
     dup /PageSize [612 792] put
     dup /ImagingBBox [0 0 612 792] put
   setpagedevice setscreen "
*End

*PageSize Legal/USLang: "
   currentscreen
   2 dict
     dup /PageSize [612 1008] put
     dup /ImagingBBox [0 0 612 1008] put
   setpagedevice setscreen "
*End

*PageSize A5/A5: "
   currentscreen
   2 dict
     dup /PageSize [420 595] put
     dup /ImagingBBox [0 0 420 595] put
   setpagedevice setscreen "
*End

*PageSize A4/A4: "
   currentscreen
   2 dict
     dup /PageSize [595 842] put
     dup /ImagingBBox [0 0 595 842] put
   setpagedevice setscreen "
*End

*PageSize A3/A3: "
   currentscreen
   2 dict
     dup /PageSize [842 1191] put
     dup /ImagingBBox [0 0 842 1191] put
   setpagedevice setscreen "
*End
*CloseUI: *PageSize


*OpenUI *PageRegion: PickOne
*OrderDependency: 40 AnySetup *PageRegion
*DefaultPageRegion: A4
*PageRegion Letter/USBrief: "
   currentscreen 
   2 dict
     dup /PageSize [612 792] put
     dup /ImagingBBox [0 0 612 792] put
   setpagedevice setscreen "
*End

*PageRegion Legal/USLang: "
   currentscreen
   2 dict 
     dup /PageSize [612 1008] put
     dup /ImagingBBox [0 0 612 1008] put 
   setpagedevice setscreen "
*End

*PageRegion A5/A5: "
   currentscreen
   2 dict
     dup /PageSize [420 595] put
     dup /ImagingBBox [0 0 420 595] put
   setpagedevice setscreen "
*End

*PageRegion A4/A4: "
   currentscreen
   2 dict
     dup /PageSize [595 842] put
     dup /ImagingBBox [0 0 595 842] put
   setpagedevice setscreen "
*End

*PageRegion A3/A3: "
   currentscreen
   2 dict
     dup /PageSize [842 1191] put
     dup /ImagingBBox [0 0 842 1191] put
   setpagedevice setscreen "
*End
*CloseUI: *PageRegion


*DefaultImageableArea: A4
*ImageableArea Letter/USBrief:           "0 0 612  792 "
*ImageableArea Legal/USLang:             "0 0 612 1008 "
*ImageableArea A4/A4:                    "0 0 595  842 "
*ImageableArea A3/A3:                    "0 0 842 1191 "
*ImageableArea A5/A5:                    "0 0 420  595 "
*ImageableArea Screen:                   "0 0 468  373 "
*ImageableArea Executive:                "0 0 522  756 "
*ImageableArea Ledger:                   "0 0 1224 792 "
*ImageableArea Tabloid/11 x 17:          "0 0 792 1224 "

*DefaultPaperDimension: A4
*PaperDimension Letter/USBrief:          "612  792 "
*PaperDimension Legal/USLang:            "612 1008 "
*PaperDimension A4/A4:                   "595  842 "
*PaperDimension A3/A3:                   "842 1191 "
*PaperDimension A5/A5:                   "420  595 "
*PaperDimension Screen:                  "468  373 "
*PaperDimension Executive:               "522  756 "
*PaperDimension Ledger:                 "1224  792 "
*PaperDimension Tabloid/11 x 17:         "792 1224 "

*RequiresPageRegion All: True


*% ************************************************************************
*%         M U L T I  P L E   R E S O L U T I O N   S U P P O R T
*% ************************************************************************
*OpenUI *Resolution: PickOne
*OrderDependency: 50 AnySetup *Resolution
*DefaultResolution: 600dpi
*Resolution 36dpi: "1 dict dup /HWResolution [36 36] put setpagedevice"
*Resolution 72dpi: "1 dict dup /HWResolution [72 72] put setpagedevice"
*Resolution 144dpi: "1 dict dup /HWResolution [144 144] put setpagedevice"
*Resolution 300dpi: "1 dict dup /HWResolution [300 300] put setpagedevice"
*Resolution 600dpi: "1 dict dup /HWResolution [600 600] put setpagedevice"
*Resolution 1200dpi: "1 dict dup /HWResolution [1200 1200] put setpagedevice"
*Resolution 2400dpi: "1 dict dup /HWResolution [2400 2400] put setpagedevice"
*Resolution 4800dpi: "1 dict dup /HWResolution [4800 4800] put setpagedevice"
*Resolution 9600dpi: "1 dict dup /HWResolution [9600 9600] put setpagedevice"
*?Resolution: "
   save
   currentpagedevice /HWResolution get
   0 get
   (          ) cvs print (dpi) = flush
   restore"
*End
*CloseUI: *Resolution

*ResScreenFreq 36dpi: "60.0"
*ResScreenFreq 72dpi: "60.0"
*ResScreenFreq 144dpi: "60.0"
*ResScreenFreq 300dpi: "60.0"
*ResScreenFreq 600dpi: "60.0"
*ResScreenFreq 1200dpi: "60.0"
*ResScreenFreq 2400dpi: "60.0"
*ResScreenFreq 4800dpi: "60.0"
*ResScreenFreq 9600dpi: "60.0"

*ResScreenAngle 36dpi: "45.0"
*ResScreenAngle 72dpi: "45.0"
*ResScreenAngle 144dpi: "45.0"
*ResScreenAngle 300dpi: "45.0"
*ResScreenAngle 600dpi: "45.0"
*ResScreenAngle 1200dpi: "45.0"
*ResScreenAngle 2400dpi: "45.0"
*ResScreenAngle 4800dpi: "45.0"
*ResScreenAngle 9600dpi: "45.0"


*% ************************************************************************
*%       O T H E R   U S E R    I N T E R F A C E    O P T I O N S
*% ************************************************************************
*% this version doesn't support any user interface options other than
*% the 'n-up' and 'watermark' stuff derived from HP's MIT-licensed code (-kp-)


*% ******************************************************************
*%              ====== N-up Printing (Kurt Pfeifle)  ========
*% ******************************************************************

*OpenUI *KP-n-up/Pages per Sheet:  PickOne
*OrderDependency: 68 AnySetup *KP-n-up
*DefaultKP-n-up: OneUp
*KP-n-up OneUp/1 (Portrait): "
% Copyright (c) <pipitas 2002>

  userdict begin
  true setglobal /KPWM 5 dict dup begin /KPWMOn true def /KPWMOdd true def end def false setglobal
  userdict /KPWMAngle known not {/KPWMAngle 45 def} if
  userdict /KPWMSize known not {/KPWMSize 48 def} if
  userdict /KPWMLocation known not {/KPWMLocation true def} if
  userdict /KPWMStyle known not {/KPWMStyle .48 def} if
  userdict /KPWMDuplex known not {/KPWMDuplex 0 def} if
  /KPWMEOP {KPWMDuplex 0 eq {true}{KPWMDuplex 1 eq KPWMOdd eq dup not {erasepage}if
    true setglobal /KPWMOdd KPWMOdd not def false setglobal}ifelse} bind def
  end

  <<
  /EndPage {userdict begin userdict /KPWMText known KPWM /KPWMOn get and
    {initmatrix
     0.5 setgray 4 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
     currentpagedevice /PageSize get aload pop 2 div exch 2 div exch translate
     KPWMAngle rotate /KPWMFont userdict /HPppScale known {KPWMSize HPppScale mul}{KPWMSize}ifelse selectfont
     KPWMText stringwidth 2 div neg exch 2 div neg exch
       userdict /HPppScale known {KPWMSize HPppScale mul}{KPWMSize}ifelse .25 mul sub moveto
     KPWMText false charpath userdict /KPWMStyle1 known
       {gsave 1 setgray KPWMStyle1 KPWMStyle add setlinewidth stroke grestore} if
     0 setgray KPWMStyle setlinewidth stroke
     KPWMLocation not {true setglobal KPWM /KPWMOn false put false setglobal} if
    } if
    2 eq {pop false}{pop KPWM begin KPWMEOP end} ifelse
    end } bind
  >> setpagedevice"
*End


*% ******************************************************************
*%     ========= 1-Up Landscape (Kurt Pfeifle) ============
*% ******************************************************************

*KP-n-up OneUpL/1 (Landscape): "
% Copyright (c) <pipitas 2002>
  userdict begin
  true setglobal /KPWM 5 dict dup begin /KPWMOn true def /KPWMOdd true def end def false setglobal

  userdict /KPWMAngle known not {/KPWMAngle 45 def} if
  userdict /KPWMSize known not {/KPWMSize 48 def} if
  userdict /KPWMLocation known not {/KPWMLocation true def} if
  userdict /KPWMStyle known not {/KPWMStyle .48 def} if
  userdict /KPWMDuplex known not {/KPWMDuplex 0 def} if

  /KPWMEOP {KPWMDuplex 0 eq {true}{KPWMDuplex 1 eq KPWMOdd eq dup not {erasepage}if
    true setglobal /KPWMOdd KPWMOdd not def false setglobal}ifelse} bind def
  end

  << /EndPage 
    {userdict begin
     userdict /KPWMText known KPWM /KPWMOn get and
    {initmatrix 0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
     currentpagedevice /PageSize get aload pop 2 div exch 2 div exch translate
     KPWMAngle 90 add rotate /KPWMFont userdict /HPppScale known {KPWMSize HPppScale mul}{KPWMSize}ifelse selectfont
     KPWMText stringwidth 2 div neg exch 2 div neg exch
       userdict /HPppScale known {KPWMSize HPppScale mul}{KPWMSize}ifelse .25 mul sub moveto
     KPWMText false charpath userdict /KPWMStyle1 known
       {gsave 1 setgray KPWMStyle1 KPWMStyle add setlinewidth stroke grestore} if
         0 setgray KPWMStyle setlinewidth stroke KPWMLocation not
       {true setglobal KPWM /KPWMOn false put false setglobal} if
    } if
    2 eq {pop false}{pop KPWM begin KPWMEOP end} ifelse end
    } bind
  >> setpagedevice"
*End

*% ******************************************************************
*%     ========= 2-Up Portrait (Kurt Pfeifle) ============
*% ******************************************************************

*KP-n-up TwoUp/2 (Portrait):  "
% Copyright (c) <pipitas 2002>
  userdict begin
  userdict /KPWMPgWidth known not
    {/KPWMPgWidth currentpagedevice /PageSize get aload pop /KPWMPgHeight exch def def} if
  /KPWMShWidth currentpagedevice /PageSize get aload pop /KPWMShHeight exch def def

  /KPWMCTM {
    /KPWMScale KPWMShWidth 32 sub KPWMPgHeight div dup KPWMShHeight 32 sub 2 div 
      KPWMPgWidth div dup 3 1 roll lt {pop} {exch pop} ifelse def
    /KPWMX1 KPWMShWidth KPWMPgHeight KPWMScale mul sub 2 div KPWMPgHeight KPWMScale mul add def
    /KPWMY1 KPWMShHeight KPWMPgWidth KPWMScale mul 2 mul sub 2 div def
    /KPWMY2 KPWMPgWidth KPWMScale mul KPWMY1 add def
  } bind def KPWMCTM

  true setglobal /KPWM 5 dict dup begin /KPWMOn true def /KPWMOdd true def end def false setglobal

  /restore {/PageSV where {pop dup PageSV eq 
    {restore KPWM begin KPWMMatrix setmatrix end}{restore}ifelse}{restore}ifelse} bind def

  userdict /KPWMAngle known not {/KPWMAngle 45 def} if
  userdict /KPWMSize known not {/KPWMSize 48 def} if
  userdict /KPWMLocation known not {/KPWMLocation true def} if
  userdict /KPWMStyle known not {/KPWMStyle .48 def} if
  userdict /KPWMDuplex known not {/KPWMDuplex 0 def} if

  /KPWMEOP {KPWMDuplex 0 eq {true}{KPWMDuplex 1 eq KPWMOdd eq dup not {erasepage}if
    true setglobal /KPWMOdd KPWMOdd not def false setglobal}ifelse} bind def

  /KPwatermark {
  0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
  0 0 KPWMPgWidth KPWMPgHeight rectstroke
  userdict /KPWMText known KPWMOn and
    {KPWMPgWidth 2 div KPWMPgHeight 2 div translate
     KPWMAngle rotate /KPWMFont KPWMSize selectfont
     KPWMText stringwidth 2 div neg exch 2 div neg exch KPWMSize .25 mul sub moveto
     KPWMText false charpath userdict /KPWMStyle1 known
       {gsave 1 setgray KPWMStyle1 KPWMScale div KPWMStyle add setlinewidth stroke grestore} if
     0 setgray KPWMStyle setlinewidth stroke
     KPWMLocation not {true setglobal KPWM /KPWMOn false put false setglobal} if
    } if
  } bind def
  end

  <<
  /BeginPage {userdict begin
    2 mod 0 eq { KPWMX1 KPWMY1 translate }{ KPWMX1 KPWMY2 translate } ifelse
    90 rotate KPWMScale KPWMScale scale
    KPWM begin true setglobal
      /KPWMMatrix matrix currentmatrix def
    false setglobal end
    end } bind
 
  /EndPage {userdict begin
    KPWM begin KPWMMatrix setmatrix
    2 eq {2 mod 0 ne {KPWMEOP}{false}ifelse}{KPwatermark 2 mod 1 eq {KPWMEOP}{false}ifelse} ifelse end
    end } bind
  >> setpagedevice

/setpagedevice {userdict begin dup /PageSize known {/KPWMPgWidth exch /PageSize get aload pop /KPWMPgHeight exch def def
  KPWMCTM <</PageSize [KPWMShWidth KPWMShHeight] /ImagingBBox null>>
  userdict /KPWMSPD known {KPWMSPD}{setpagedevice} ifelse}if end} bind def"
*End


*% ******************************************************************
*%     ========= 2-Up Landscape (Kurt Pfeifle) ============
*% ******************************************************************

*KP-n-up TwoUpL/2 (Landscape): "
% Copyright (c) <pipitas 2002>
  userdict begin
  userdict /KPWMPgWidth known not
    {/KPWMPgWidth currentpagedevice /PageSize get aload pop /KPWMPgHeight exch def def} if
  /KPWMShWidth currentpagedevice /PageSize get aload pop /KPWMShHeight exch def def

  /KPWMCTM {
    /KPWMScale KPWMShWidth 32 sub KPWMPgHeight div dup KPWMShHeight 32 sub 2 div 
      KPWMPgWidth div dup 3 1 roll lt {pop} {exch pop} ifelse def
    /KPWMX1 KPWMShWidth KPWMPgHeight KPWMScale mul sub 2 div def
    /KPWMY1 KPWMShHeight KPWMPgWidth KPWMScale mul 2 mul sub 2 div KPWMShHeight exch sub def
    /KPWMY2 KPWMY1 KPWMPgWidth KPWMScale mul sub def
  } bind def KPWMCTM

  true setglobal /KPWM 5 dict dup begin /KPWMOn true def /KPWMOdd true def end def false setglobal

  /restore {/PageSV where {pop dup PageSV eq 
    {restore KPWM begin KPWMMatrix setmatrix end}{restore}ifelse}{restore}ifelse} bind def

  userdict /KPWMAngle known not {/KPWMAngle 45 def} if
  userdict /KPWMSize known not {/KPWMSize 48 def} if
  userdict /KPWMLocation known not {/KPWMLocation true def} if
  userdict /KPWMStyle known not {/KPWMStyle .48 def} if
  userdict /KPWMDuplex known not {/KPWMDuplex 0 def} if

  /KPWMEOP {KPWMDuplex 0 eq {true}{KPWMDuplex 1 eq KPWMOdd eq dup not {erasepage}if
    true setglobal /KPWMOdd KPWMOdd not def false setglobal}ifelse} bind def

  /KPwatermark {
  0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
  0 0 KPWMPgWidth KPWMPgHeight rectstroke
  userdict /KPWMText known KPWMOn and
    {KPWMPgWidth 2 div KPWMPgHeight 2 div translate
     KPWMAngle 90 add rotate /KPWMFont KPWMSize selectfont
     KPWMText stringwidth 2 div neg exch 2 div neg exch KPWMSize .25 mul sub moveto
     KPWMText false charpath userdict /KPWMStyle1 known
       {gsave 1 setgray KPWMStyle1 KPWMScale div KPWMStyle add setlinewidth stroke grestore} if
     0 setgray KPWMStyle setlinewidth stroke
     KPWMLocation not {true setglobal KPWM /KPWMOn false put false setglobal} if
    } if
  } bind def
  end

  <<
  /BeginPage {userdict begin
    2 mod 0 eq { KPWMX1 KPWMY1 translate }{ KPWMX1 KPWMY2 translate } ifelse
    -90 rotate KPWMScale KPWMScale scale
    KPWM begin true setglobal
      /KPWMMatrix matrix currentmatrix def
    false setglobal end
    end } bind
 
  /EndPage {userdict begin
    KPWM begin KPWMMatrix setmatrix
    2 eq {2 mod 0 ne {KPWMEOP}{false}ifelse}{KPwatermark 2 mod 1 eq {KPWMEOP}{false}ifelse} ifelse end
    end } bind
  >> setpagedevice

/setpagedevice {userdict begin dup /PageSize known {/KPWMPgWidth exch /PageSize get aload pop /KPWMPgHeight exch def def
  KPWMCTM <</PageSize [KPWMShWidth KPWMShHeight] /ImagingBBox null>>
  userdict /KPWMSPD known {KPWMSPD}{setpagedevice} ifelse}if end} bind def"
*End

*% ******************************************************************
*%     ========= 4-Up (Kurt Pfeifle) ============
*% ******************************************************************

*KP-n-up FourUp/4 (Portrait):  "
% Copyright (c) <pipitas 2002>
  userdict begin
  userdict /KPWMPgWidth known not
    {/KPWMPgWidth currentpagedevice /PageSize get aload pop /KPWMPgHeight exch def def} if
  /KPWMShWidth currentpagedevice /PageSize get aload pop /KPWMShHeight exch def def

  /KPWMCTM {
    /KPWMScale KPWMShWidth 32 sub 2 div KPWMPgWidth div dup KPWMShHeight 32 sub 2 div 
      KPWMPgHeight div dup 3 1 roll lt {pop} {exch pop} ifelse def
    /KPWMX1 KPWMShWidth KPWMPgWidth KPWMScale mul 2 mul sub 2 div def
    /KPWMX2 KPWMPgWidth KPWMScale mul KPWMX1 add def
    /KPWMY1 KPWMShHeight KPWMPgHeight KPWMScale mul 2 mul sub 2 div def
    /KPWMY2 KPWMPgHeight KPWMScale mul KPWMY1 add def
  } bind def KPWMCTM

  true setglobal /KPWM 5 dict dup begin /KPWMOn true def /KPWMOdd true def end def false setglobal

  /restore {/PageSV where {pop dup PageSV eq 
    {restore KPWM begin KPWMMatrix setmatrix end}{restore}ifelse}{restore}ifelse} bind def

  userdict /KPWMAngle known not {/KPWMAngle 45 def} if
  userdict /KPWMSize known not {/KPWMSize 48 def} if
  userdict /KPWMLocation known not {/KPWMLocation true def} if
  userdict /KPWMStyle known not {/KPWMStyle .48 def} if
  userdict /KPWMDuplex known not {/KPWMDuplex 0 def} if

  /KPWMEOP {KPWMDuplex 0 eq {true}{KPWMDuplex 1 eq KPWMOdd eq dup not {erasepage}if
    true setglobal /KPWMOdd KPWMOdd not def false setglobal}ifelse} bind def

  /KPwatermark {
  0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
  0 0 KPWMPgWidth KPWMPgHeight rectstroke
  userdict /KPWMText known KPWMOn and
    {KPWMPgWidth 2 div KPWMPgHeight 2 div translate
     KPWMAngle rotate /KPWMFont KPWMSize selectfont
     KPWMText stringwidth 2 div neg exch 2 div neg exch KPWMSize .25 mul sub moveto
     KPWMText false charpath userdict /KPWMStyle1 known
       {gsave 1 setgray KPWMStyle1 KPWMScale div KPWMStyle add setlinewidth stroke grestore} if
     0 setgray KPWMStyle setlinewidth stroke
     KPWMLocation not {true setglobal KPWM /KPWMOn false put false setglobal} if
    } if
  } bind def
  end

<<
  /BeginPage {userdict begin
    4 mod dup dup dup
    0 eq {KPWMX1 KPWMY2 translate} if
    1 eq {KPWMX2 KPWMY2 translate} if
    2 eq {KPWMX1 KPWMY1 translate} if
    3 eq {KPWMX2 KPWMY1 translate} if
    KPWMScale KPWMScale scale
    KPWM begin true setglobal
      /KPWMMatrix matrix currentmatrix def
    false setglobal end
    end } bind
 
  /EndPage {userdict begin
    KPWM begin KPWMMatrix setmatrix
    2 eq {4 mod 0 ne {KPWMEOP}{false}ifelse}{KPwatermark 4 mod 3 eq {KPWMEOP}{false}ifelse} ifelse end
    end } bind
>> setpagedevice

/setpagedevice {userdict begin dup /PageSize known {/KPWMPgWidth exch /PageSize get aload pop /KPWMPgHeight exch def def
  KPWMCTM <</PageSize [KPWMShWidth KPWMShHeight] /ImagingBBox null>>
  userdict /KPWMSPD known {KPWMSPD}{setpagedevice} ifelse}if end} bind def"
*End


*% ******************************************************************
*%     ========= 4-Up Landscape (Kurt Pfeifle) ============
*% ******************************************************************

*KP-n-up FourUpL/4 (Landscape): "
% Copyright (c) <pipitas 2002>
  userdict begin
  userdict /KPWMPgWidth known not
    {/KPWMPgWidth currentpagedevice /PageSize get aload pop /KPWMPgHeight exch def def} if
  /KPWMShWidth currentpagedevice /PageSize get aload pop /KPWMShHeight exch def def

  /KPWMCTM {
    /KPWMScale KPWMShWidth 32 sub 2 div KPWMPgWidth div dup KPWMShHeight 32 sub 2 div 
      KPWMPgHeight div dup 3 1 roll lt {pop} {exch pop} ifelse def
    /KPWMX1 KPWMShWidth KPWMPgWidth KPWMScale mul 2 mul sub 2 div def
    /KPWMX2 KPWMPgWidth KPWMScale mul KPWMX1 add def
    /KPWMY1 KPWMShHeight KPWMPgHeight KPWMScale mul 2 mul sub 2 div def
    /KPWMY2 KPWMPgHeight KPWMScale mul KPWMY1 add def
  } bind def KPWMCTM

  true setglobal /KPWM 5 dict dup begin /KPWMOn true def /KPWMOdd true def end def false setglobal

  /restore {/PageSV where {pop dup PageSV eq 
    {restore KPWM begin KPWMMatrix setmatrix end}{restore}ifelse}{restore}ifelse} bind def

  userdict /KPWMAngle known not {/KPWMAngle 45 def} if
  userdict /KPWMSize known not {/KPWMSize 48 def} if
  userdict /KPWMLocation known not {/KPWMLocation true def} if
  userdict /KPWMStyle known not {/KPWMStyle .48 def} if
  userdict /KPWMDuplex known not {/KPWMDuplex 0 def} if

  /KPWMEOP {KPWMDuplex 0 eq {true}{KPWMDuplex 1 eq KPWMOdd eq dup not {erasepage}if
    true setglobal /KPWMOdd KPWMOdd not def false setglobal}ifelse} bind def

  /KPwatermark {
  0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
  0 0 KPWMPgWidth KPWMPgHeight rectstroke
  userdict /KPWMText known KPWMOn and
    {KPWMPgWidth 2 div KPWMPgHeight 2 div translate
     KPWMAngle 90 add rotate /KPWMFont KPWMSize selectfont
     KPWMText stringwidth 2 div neg exch 2 div neg exch KPWMSize .25 mul sub moveto
     KPWMText false charpath userdict /KPWMStyle1 known
       {gsave 1 setgray KPWMStyle1 KPWMScale div KPWMStyle add setlinewidth stroke grestore} if
     0 setgray KPWMStyle setlinewidth stroke
     KPWMLocation not {true setglobal KPWM /KPWMOn false put false setglobal} if
    } if
  } bind def
  end

  <<
  /BeginPage {userdict begin
    4 mod dup dup dup
    0 eq {KPWMX1 KPWMY1 translate} if
    1 eq {KPWMX1 KPWMY2 translate} if
    2 eq {KPWMX2 KPWMY1 translate} if
    3 eq {KPWMX2 KPWMY2 translate} if
    KPWMScale KPWMScale scale
    KPWM begin true setglobal
      /KPWMMatrix matrix currentmatrix def
    false setglobal end
    end } bind
 
  /EndPage {userdict begin
    KPWM begin KPWMMatrix setmatrix
    2 eq {4 mod 0 ne {KPWMEOP}{false}ifelse}{KPwatermark 4 mod 3 eq {KPWMEOP}{false}ifelse} ifelse end
    end } bind
  >> setpagedevice

/setpagedevice {userdict begin dup /PageSize known {/KPWMPgWidth exch /PageSize get aload pop /KPWMPgHeight exch def def
  KPWMCTM <</PageSize [KPWMShWidth KPWMShHeight] /ImagingBBox null>>
  userdict /KPWMSPD known {KPWMSPD}{setpagedevice} ifelse}if end} bind def"
*End


*% ******************************************************************
*%     ========= 6-Up Portrait (Kurt Pfeifle) ============
*% ******************************************************************

*KP-n-up SixUp/6 (Portrait):  "
% Copyright (c) <pipitas 2002>
  userdict begin
  userdict /KPWMPgWidth known not
    {/KPWMPgWidth currentpagedevice /PageSize get aload pop /KPWMPgHeight exch def def} if
  /KPWMShWidth currentpagedevice /PageSize get aload pop /KPWMShHeight exch def def

  /KPWMCTM {
    /KPWMScale KPWMShWidth 32 sub 2 div KPWMPgHeight div dup KPWMShHeight 32 sub 3 div 
      KPWMPgWidth div dup 3 1 roll lt {pop} {exch pop} ifelse def
    /KPWMX1 KPWMShWidth KPWMPgHeight KPWMScale mul 2 mul sub 2 div KPWMPgHeight KPWMScale mul add def
    /KPWMY1 KPWMShHeight KPWMPgWidth KPWMScale mul 3 mul sub 2 div def
  } bind def KPWMCTM

  true setglobal /KPWM 5 dict dup begin /KPWMOn true def /KPWMOdd true def end def false setglobal

  /restore {/PageSV where {pop dup PageSV eq 
    {restore KPWM begin KPWMMatrix setmatrix end}{restore}ifelse}{restore}ifelse} bind def

  userdict /KPWMAngle known not {/KPWMAngle 45 def} if
  userdict /KPWMSize known not {/KPWMSize 48 def} if
  userdict /KPWMLocation known not {/KPWMLocation true def} if
  userdict /KPWMStyle known not {/KPWMStyle .48 def} if
  userdict /KPWMDuplex known not {/KPWMDuplex 0 def} if

  /KPWMEOP {KPWMDuplex 0 eq {true}{KPWMDuplex 1 eq KPWMOdd eq dup not {erasepage}if
    true setglobal /KPWMOdd KPWMOdd not def false setglobal}ifelse} bind def

  /KPwatermark {
  0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
  0 0 KPWMPgWidth KPWMPgHeight rectstroke
  userdict /KPWMText known KPWMOn and
    {KPWMPgWidth 2 div KPWMPgHeight 2 div translate
     KPWMAngle rotate /KPWMFont KPWMSize selectfont
     KPWMText stringwidth 2 div neg exch 2 div neg exch KPWMSize .25 mul sub moveto
     KPWMText false charpath userdict /KPWMStyle1 known
       {gsave 1 setgray KPWMStyle1 KPWMScale div KPWMStyle add setlinewidth stroke grestore} if
     0 setgray KPWMStyle setlinewidth stroke
     KPWMLocation not {true setglobal KPWM /KPWMOn false put false setglobal} if
    } if
  } bind def
  end

  <<
  /BeginPage {userdict begin
    6 mod dup
    3 idiv KPWMPgHeight KPWMScale mul mul KPWMX1 add
    exch dup 3 idiv 3 mul sub KPWMPgWidth KPWMScale mul mul KPWMY1 add
    translate
    90 rotate KPWMScale KPWMScale scale
    KPWM begin true setglobal
      /KPWMMatrix matrix currentmatrix def
    false setglobal end
    end } bind
 
  /EndPage {userdict begin
    KPWM begin KPWMMatrix setmatrix
    2 eq {6 mod 0 ne {KPWMEOP}{false}ifelse}{KPwatermark 6 mod 5 eq {KPWMEOP}{false}ifelse} ifelse end
    end } bind
  >> setpagedevice

/setpagedevice {userdict begin dup /PageSize known {/KPWMPgWidth exch /PageSize get aload pop /KPWMPgHeight exch def def
  KPWMCTM <</PageSize [KPWMShWidth KPWMShHeight] /ImagingBBox null>>
  userdict /KPWMSPD known {KPWMSPD}{setpagedevice} ifelse}if end} bind def"
*End


*% ******************************************************************
*%     ========= 6-Up Landscape (Kurt Pfeifle) ============
*% ******************************************************************

*KP-n-up SixUpL/6 (Landscape):  "
% Copyright (c) <pipitas 2002>
  userdict begin
  userdict /KPWMPgWidth known not
    {/KPWMPgWidth currentpagedevice /PageSize get aload pop /KPWMPgHeight exch def def} if
  /KPWMShWidth currentpagedevice /PageSize get aload pop /KPWMShHeight exch def def

  /KPWMCTM {
    /KPWMScale KPWMShWidth 32 sub 2 div KPWMPgHeight div dup KPWMShHeight 32 sub 3 div 
      KPWMPgWidth div dup 3 1 roll lt {pop} {exch pop} ifelse def
    /KPWMX1 KPWMShWidth KPWMPgHeight KPWMScale mul 2 mul sub 2 div def
    /KPWMY1 KPWMShHeight KPWMPgWidth KPWMScale mul 3 mul sub 2 div KPWMPgWidth KPWMScale mul add def
  } bind def KPWMCTM

  true setglobal /KPWM 5 dict dup begin /KPWMOn true def /KPWMOdd true def end def false setglobal

  /restore {/PageSV where {pop dup PageSV eq 
    {restore KPWM begin KPWMMatrix setmatrix end}{restore}ifelse}{restore}ifelse} bind def

  userdict /KPWMAngle known not {/KPWMAngle 45 def} if
  userdict /KPWMSize known not {/KPWMSize 48 def} if
  userdict /KPWMLocation known not {/KPWMLocation true def} if
  userdict /KPWMStyle known not {/KPWMStyle .48 def} if
  userdict /KPWMDuplex known not {/KPWMDuplex 0 def} if

  /KPWMEOP {KPWMDuplex 0 eq {true}{KPWMDuplex 1 eq KPWMOdd eq dup not {erasepage}if
    true setglobal /KPWMOdd KPWMOdd not def false setglobal}ifelse} bind def

  /KPwatermark {
  0 setgray 1 setlinewidth true setstrokeadjust 0 setlinejoin 0 setlinecap [] 0 setdash
  0 0 KPWMPgWidth KPWMPgHeight rectstroke
  userdict /KPWMText known KPWMOn and
    {KPWMPgWidth 2 div KPWMPgHeight 2 div translate
     KPWMAngle 90 add rotate /KPWMFont KPWMSize selectfont
     KPWMText stringwidth 2 div neg exch 2 div neg exch KPWMSize .25 mul sub moveto
     KPWMText false charpath userdict /KPWMStyle1 known
       {gsave 1 setgray KPWMStyle1 KPWMScale div KPWMStyle add setlinewidth stroke grestore} if
     0 setgray KPWMStyle setlinewidth stroke
     KPWMLocation not {true setglobal KPWM /KPWMOn false put false setglobal} if
    } if
  } bind def
  end

  <<
  /BeginPage {userdict begin
    6 mod dup
    dup 2 idiv 2 mul sub KPWMPgHeight KPWMScale mul mul KPWMX1 add
    exch 2 idiv 2 exch sub KPWMPgWidth KPWMScale mul mul KPWMY1 add
    translate
    -90 rotate KPWMScale KPWMScale scale
    KPWM begin true setglobal
      /KPWMMatrix matrix currentmatrix def
    false setglobal end
    end } bind
 
  /EndPage {userdict begin
    KPWM begin KPWMMatrix setmatrix
    2 eq {6 mod 0 ne {KPWMEOP}{false}ifelse}{KPwatermark 6 mod 5 eq {KPWMEOP}{false}ifelse} ifelse end
    end } bind
  >> setpagedevice

/setpagedevice {userdict begin dup /PageSize known {/KPWMPgWidth exch /PageSize get aload pop /KPWMPgHeight exch def def
  KPWMCTM <</PageSize [KPWMShWidth KPWMShHeight] /ImagingBBox null>>
  userdict /KPWMSPD known {KPWMSPD}{setpagedevice} ifelse}if end} bind def"
*End

*CloseUI: *KP-n-up

*% *************************************************************************
*%         === Watermark Text Selection (Kurt Pfeifle) ========
*% *************************************************************************

*OpenUI *KPWMText/Watermark:  PickOne
*OrderDependency: 65 AnySetup *KPWMText
*DefaultKPWMText: grml
*KPWMText None/None: ""
*KPWMText DankaDigitalProductsDevelopment/Danka Digital Products Development: "userdict /KPWMText (Danka Digital Products Development) put"
*KPWMText DPD/DPD: "userdict /KPWMText (DPD) put"
*KPWMText grml/grml: "userdict /KPWMText (grml) put"
*KPWMText DankaAtTheDesktop/Danka at the Desktop: "userdict /KPWMText (Danka at the Desktop) put"
*KPWMText CompanyConfidential/Company Confidential: "userdict /KPWMText (Company Confidential) put"
*KPWMText CompanyProprietary/Company Proprietary: "userdict /KPWMText (Company Proprietary) put"
*KPWMText CompanyPrivate/Company Private: "userdict /KPWMText (Company Private) put"
*KPWMText Confidential/Confidential: "userdict /KPWMText (Confidential) put"
*KPWMText Copy/Copy: "userdict /KPWMText (Copy) put"
*KPWMText Copyright/Copyright: "userdict /KPWMText (Copyright) put"
*KPWMText Draft/Draft: "userdict /KPWMText (Draft) put"
*KPWMText FileCopy/File Copy: "userdict /KPWMText (File Copy) put"
*KPWMText Final/Final Version: "userdict /KPWMText (Final Version) put"
*KPWMText ForInternalUse/For Internal Use Only: "userdict /KPWMText (For Internal Use Only) put"
*KPWMText Preliminary/Preliminary Version: "userdict /KPWMText (Preliminary Version) put"
*KPWMText Proof/Proof: "userdict /KPWMText (Proof) put"
*KPWMText ReviewCopy/Review Copy: "userdict /KPWMText (Review Copy) put"
*KPWMText Sample/Sample: "userdict /KPWMText (Sample) put"
*KPWMText TopSecret/Top Secret: "userdict /KPWMText (Top Secret) put"
*KPWMText Urgent/Urgent: "userdict /KPWMText (Urgent) put"
*CloseUI: *KPWMText


*% ******************************************************************
*%      === WaterMark Font Selection (Kurt Pfeifle)========
*% ******************************************************************

*OpenUI *KPWMFont/Watermark Font:  PickOne
*OrderDependency: 65 AnySetup *KPWMFont
*DefaultKPWMFont: HelveticaB
*KPWMFont CourierB/Courier Bold: "
  /Courier-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding ISOLatin1Encoding def currentdict 
  end
  /KPWMFont exch definefont pop"
*End
*KPWMFont TimesB/Times Bold: "
  /Times-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding ISOLatin1Encoding def currentdict 
  end
  /KPWMFont exch definefont pop"
*End
*KPWMFont HelveticaB/Helvetica Bold: "
  /Helvetica-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding ISOLatin1Encoding def currentdict 
  end
  /KPWMFont exch definefont pop"
*End
*KPWMFont PalatinoB/Palatino Bold:"
  /Palatino-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding ISOLatin1Encoding def currentdict 
  end
  /KPWMFont exch definefont pop"
*End
*KPWMFont PalatinoBI/Palatino Bold Italic: "
  /Palatino-BoldItalic findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding ISOLatin1Encoding def currentdict 
  end
  /KPWMFont exch definefont pop"
*End
*KPWMFont NewCenturySchlbk-Bold/New Century Schoolbook Bold: "
  /NewCenturySchlbk-Bold findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding ISOLatin1Encoding def currentdict 
  end
  /KPWMFont exch definefont pop"
*End
*CloseUI: *KPWMFont


*% ******************************************************************
*%      === WaterMark Size Selection (Kurt Pfeifle) ========
*% ******************************************************************

*OpenUI *KPWMFontSize/Watermark Font Size:  PickOne
*OrderDependency: 65 AnySetup *KPWMFontSize
*DefaultKPWMFontSize: pt144
*KPWMFontSize pt24/24 Punkte: "userdict /KPWMSize 24 put"
*KPWMFontSize pt30/30 Punkte: "userdict /KPWMSize 30 put"
*KPWMFontSize pt36/36 Punkte: "userdict /KPWMSize 36 put"
*KPWMFontSize pt42/42 Punkte: "userdict /KPWMSize 42 put"
*KPWMFontSize pt48/48 Punkte: "userdict /KPWMSize 48 put"
*KPWMFontSize pt54/54 Punkte: "userdict /KPWMSize 54 put"
*KPWMFontSize pt60/60 Punkte: "userdict /KPWMSize 60 put"
*KPWMFontSize pt66/66 Punkte: "userdict /KPWMSize 66 put"
*KPWMFontSize pt72/72 Punkte: "userdict /KPWMSize 72 put"
*KPWMFontSize pt78/78 Punkte: "userdict /KPWMSize 78 put"
*KPWMFontSize pt84/84 Punkte: "userdict /KPWMSize 84 put"
*KPWMFontSize pt90/90 Punkte: "userdict /KPWMSize 90 put"
*KPWMFontSize pt96/96 Punkte: "userdict /KPWMSize 96 put"
*KPWMFontSize pt108/108 Punkte: "userdict /KPWMSize 108 put"
*KPWMFontSize pt120/120 Punkte: "userdict /KPWMSize 120 put"
*KPWMFontSize pt144/144 Punkte: "userdict /KPWMSize 144 put"
*CloseUI: *KPWMFontSize


*% ******************************************************************
*%      === WaterMark Angle Selection (Kurt Pfeifle) ========
*% ******************************************************************

*OpenUI *KPWMTextAngle/Watermark Text Angel:  PickOne
*OrderDependency: 65 AnySetup *KPWMTextAngle
*DefaultKPWMTextAngle: Deg60
*KPWMTextAngle Deg90/90 Grad: "userdict /KPWMAngle 90 put"
*KPWMTextAngle Deg80/80 Grad: "userdict /KPWMAngle 80 put"
*KPWMTextAngle Deg75/75 Grad: "userdict /KPWMAngle 75 put"
*KPWMTextAngle Deg66/66 Grad: "userdict /KPWMAngle 66 put"
*KPWMTextAngle Deg60/60 Grad: "userdict /KPWMAngle 60 put"
*KPWMTextAngle Deg50/50 Grad: "userdict /KPWMAngle 50 put"
*KPWMTextAngle Deg45/45 Grad: "userdict /KPWMAngle 45 put"
*KPWMTextAngle Deg40/40 Grad: "userdict /KPWMAngle 40 put"
*KPWMTextAngle Deg30/30 Grad: "userdict /KPWMAngle 30 put"
*KPWMTextAngle Deg20/20 Grad: "userdict /KPWMAngle 20 put"
*KPWMTextAngle Deg15/15 Grad: "userdict /KPWMAngle 15 put"
*KPWMTextAngle Deg10/10 Grad: "userdict /KPWMAngle 10 put"
*KPWMTextAngle Deg0/0 Grad: "userdict /KPWMAngle 0 put"
*KPWMTextAngle DegN10/-10 Grad: "userdict /KPWMAngle -10 put"
*KPWMTextAngle DegN15/-15 Grad: "userdict /KPWMAngle -15 put"
*KPWMTextAngle DegN20/-20 Grad: "userdict /KPWMAngle -20 put"
*KPWMTextAngle DegN30/-30 Grad: "userdict /KPWMAngle -30 put"
*KPWMTextAngle DegN40/-40 Grad: "userdict /KPWMAngle -40 put"
*KPWMTextAngle DegN45/-45 Grad: "userdict /KPWMAngle -45 put"
*KPWMTextAngle DegN50/-50 Grad: "userdict /KPWMAngle -50 put"
*KPWMTextAngle DegN60/-60 Grad: "userdict /KPWMAngle -60 put"
*KPWMTextAngle DegN66/-66 Grad: "userdict /KPWMAngle -66 put"
*KPWMTextAngle DegN75/-75 Grad: "userdict /KPWMAngle -75 put"
*KPWMTextAngle DegN80/-80 Grad: "userdict /KPWMAngle -80 put"
*KPWMTextAngle DegN90/-90 Grad: "userdict /KPWMAngle -90 put"
*CloseUI: *KPWMTextAngle


*% ******************************************************************
*%      === WaterMark Style Selection (Kurt Pfeifle) ========
*% ******************************************************************

*OpenUI *KPWMTextStyle/Watermark Font Style:  PickOne
*OrderDependency: 65 AnySetup *KPWMTextStyle
*DefaultKPWMTextStyle: Halo
*KPWMTextStyle Narrow/Narrow Outline: "userdict /KPWMStyle .24 put"
*KPWMTextStyle Medium/Medium Outline: "userdict /KPWMStyle .48 put"
*KPWMTextStyle Wide/Wide Outline: "userdict /KPWMStyle .96 put"
*KPWMTextStyle VeryWide/Very Wide Outline: "userdict /KPWMStyle 1.92 put"
*KPWMTextStyle Halo/Wide Outline Halo: "userdict /KPWMStyle .96 put userdict /KPWMStyle1 .84 put"
*CloseUI: *KPWMTextStyle


*% ******************************************************************
*%      === WaterMark Location Selection (Kurt Pfeifle) ========
*% ******************************************************************


*OpenUI *KPWMLocation/Print Watermark:  Boolean
*OrderDependency: 65 AnySetup *KPWMLocation
*DefaultKPWMLocation: False
*KPWMLocation True/All Pages: "userdict /KPWMLocation true put"
*KPWMLocation False/First Page Only: "userdict /KPWMLocation false put"
*CloseUI: *KPWMLocation

*% ******************************************************************
*%   ===== PPD Version information & warning (Kurt Pfeifle) ======
*% ******************************************************************

*OpenUI *KPPPDInfo/About this Danka-enhanced PPD:  PickOne
*OrderDependency: 65 AnySetup *KPPPDInfo
*DefaultKPPPDInfo: KPModified
*KPPPDInfo KPModified/PPD was modified by Kurt Pfeifle -- Danka DPD: "" 
*KPPPDInfo KPGuarantee/* no guarantee is provided whatsoever: ""
*KPPPDInfo KPLimitation/* new functions might not work under all conditions: ""
*KPPPDInfo KPDanger/* please do take your own precautions --: ""
*KPPPDInfo KPWarning/   -- it does not prevent pregnancy nor AIDS: ""
*CloseUI: *KPPPDInfo


*% ************************************************************************
*%                  F O N T    I N F O R M A T I O N
*% ************************************************************************
*ADHasEuro: True
*DefaultFont: Courier
*Font AdobeSansMM: Standard "(001.000)" Standard Disk
*Font AdobeSerifMM: Standard "(001.001)" Standard Disk
*Font AlbertusMT-Italic: Standard "(001.001)" Standard Disk
*Font AlbertusMT-Light: Standard "(001.001)" Standard Disk
*Font AlbertusMT: Standard "(001.001)" Standard Disk
*Font AntiqueOlive-Bold: Standard "(001.002)" Standard Disk
*Font AntiqueOlive-Compact: Standard "(001.002)" Standard Disk
*Font AntiqueOlive-Italic: Standard "(001.002)" Standard Disk
*Font AntiqueOlive-Roman: Standard "(001.002)" Standard Disk
*Font Apple-Chancery: Standard "(3.0)" Standard Disk
*Font Arial-BoldItalicMT: Standard "(001.002)" Standard Disk
*Font Arial-BoldMT: Standard "(001.002)" Standard Disk
*Font Arial-ItalicMT: Standard "(001.002)" Standard Disk
*Font ArialMT: Standard "(001.002)" Standard Disk
*Font AvantGarde-Book: Standard "(003.000)" Standard Disk
*Font AvantGarde-BookOblique: Standard "(003.000)" Standard Disk
*Font AvantGarde-Demi: Standard "(003.000)" Standard Disk
*Font AvantGarde-DemiOblique: Standard "(003.000)" Standard Disk
*Font Bodoni-Bold: Standard "(001.003)" Standard Disk
*Font Bodoni-BoldItalic: Standard "(001.003)" Standard Disk
*Font Bodoni-Italic: Standard "(001.003)" Standard Disk
*Font Bodoni-Poster: Standard "(001.003)" Standard Disk
*Font Bodoni-PosterCompressed: Standard "(001.002)" Standard Disk
*Font Bodoni: Standard "(001.003)" Standard Disk
*Font Bookman-Demi: Standard "(003.000)" Standard Disk
*Font Bookman-DemiItalic: Standard "(003.000)" Standard Disk
*Font Bookman-Light: Standard "(003.000)" Standard Disk
*Font Bookman-LightItalic: Standard "(003.000)" Standard Disk
*Font Carta: Special "(001.001)" Special Disk
*Font Chicago: Standard "(3.0)" Standard Disk
*Font Clarendon-Bold: Standard "(001.002)" Standard Disk
*Font Clarendon-Light: Standard "(001.002)" Standard Disk
*Font Clarendon: Standard "(001.002)" Standard Disk
*Font CooperBlack-Italic: Standard "(001.004)" Standard Disk
*Font CooperBlack: Standard "(001.004)" Standard Disk
*Font Copperplate-ThirtyThreeBC: Standard "(001.003)" Standard Disk
*Font Copperplate-ThirtyTwoBC: Standard "(001.003)" Standard Disk
*Font Coronet-Regular: Standard "(001.001)" Standard Disk
*Font Courier-Bold: Standard "(004.000)" Standard Disk
*Font Courier-BoldOblique: Standard "(004.000)" Standard Disk
*Font Courier-Oblique: Standard "(004.000)" Standard Disk
*Font Courier: Standard "(004.000)" Standard Disk
*Font Eurostile-Bold: Standard "(001.002)" Standard Disk
*Font Eurostile-BoldExtendedTwo: Standard "(001.003)" Standard Disk
*Font Eurostile-ExtendedTwo: Standard "(001.003)" Standard Disk
*Font Eurostile: Standard "(001.003)" Standard Disk
*Font Geneva: Standard "(3.0)" Standard Disk
*Font GillSans-Bold: Standard "(001.002)" Standard Disk
*Font GillSans-BoldCondensed: Standard "(001.002)" Standard Disk
*Font GillSans-BoldItalic: Standard "(001.003)" Standard Disk
*Font GillSans-Condensed: Standard "(001.002)" Standard Disk
*Font GillSans-ExtraBold: Standard "(001.002)" Standard Disk
*Font GillSans-Italic: Standard "(001.003)" Standard Disk
*Font GillSans-Light: Standard "(001.002)" Standard Disk
*Font GillSans-LightItalic: Standard "(001.003)" Standard Disk
*Font GillSans: Standard "(001.003)" Standard Disk
*Font Goudy-Bold: Standard "(001.003)" Standard Disk
*Font Goudy-BoldItalic: Standard "(001.003)" Standard Disk
*Font Goudy-ExtraBold: Standard "(001.002)" Standard Disk
*Font Goudy-Italic: Standard "(001.003)" Standard Disk
*Font Goudy: Standard "(001.004)" Standard Disk
*Font Helvetica-Bold: Standard "(003.000)" Standard Disk
*Font Helvetica-BoldOblique: Standard "(003.000)" Standard Disk
*Font Helvetica-Condensed-Bold: Standard "(003.000)" Standard Disk
*Font Helvetica-Condensed-BoldObl: Standard "(003.000)" Standard Disk
*Font Helvetica-Condensed-Oblique: Standard "(003.000)" Standard Disk
*Font Helvetica-Condensed: Standard "(003.000)" Standard Disk
*Font Helvetica-Narrow-Bold: Standard "(003.000)" Standard Disk
*Font Helvetica-Narrow-BoldOblique: Standard "(003.000)" Standard Disk
*Font Helvetica-Narrow-Oblique: Standard "(003.000)" Standard Disk
*Font Helvetica-Narrow: Standard "(003.000)" Standard Disk
*Font Helvetica-Oblique: Standard "(003.000)" Standard Disk
*Font Helvetica: Standard "(003.000)" Standard Disk
*Font HoeflerText-Black: Standard "(1.0)" Unknown Disk
*Font HoeflerText-BlackItalic: Standard "(1.0)" Unknown Disk
*Font HoeflerText-Italic: Standard "(1.0)" Unknown Disk
*Font HoeflerText-Ornaments: Special "(001.001)" Standard Disk
*Font HoeflerText-Regular: Standard "(1.0)" Unknown Disk
*Font JoannaMT-Bold: Standard "(001.001)" Standard Disk
*Font JoannaMT-BoldItalic: Standard "(001.001)" Standard Disk
*Font JoannaMT-Italic: Standard "(001.001)" Standard Disk
*Font JoannaMT: Standard "(001.001)" Standard Disk
*Font LetterGothic-Bold: Standard "(001.007)" Standard Disk
*Font LetterGothic-BoldSlanted: Standard "(001.006)" Standard Disk
*Font LetterGothic-Slanted: Standard "(001.005)" Standard Disk
*Font LetterGothic: Standard "(001.005)" Standard Disk
*Font LubalinGraph-Book: Standard "(001.004)" Standard Disk
*Font LubalinGraph-BookOblique: Standard "(001.004)" Standard Disk
*Font LubalinGraph-Demi: Standard "(001.004)" Standard Disk
*Font LubalinGraph-DemiOblique: Standard "(001.004)" Standard Disk
*Font Marigold: Standard "(001.001)" Standard Disk
*Font MonaLisa-Recut: Standard "(001.001)" Standard Disk
*Font Monaco: Standard "(3.0)" Standard Disk
*Font NewCenturySchlbk-Bold: Standard "(003.000)" Standard Disk
*Font NewCenturySchlbk-BoldItalic: Standard "(003.000)" Standard Disk
*Font NewCenturySchlbk-Italic: Standard "(003.000)" Standard Disk
*Font NewCenturySchlbk-Roman: Standard "(003.000)" Standard Disk
*Font NewYork: Standard "(3.0)" Standard Disk
*Font Optima-Bold: Standard "(001.007)" Standard Disk
*Font Optima-BoldItalic: Standard "(001.001)" Standard Disk
*Font Optima-Italic: Standard "(001.001)" Standard Disk
*Font Optima: Standard "(001.006)" Standard Disk
*Font Oxford: Standard "(001.001)" Standard Disk
*Font Palatino-Bold: Standard "(003.000)" Standard Disk
*Font Palatino-BoldItalic: Standard "(003.000)" Standard Disk
*Font Palatino-Italic: Standard "(003.000)" Standard Disk
*Font Palatino-Roman: Standard "(003.000)" Standard Disk
*Font StempelGaramond-Bold: Standard "(001.003)" Standard Disk
*Font StempelGaramond-BoldItalic: Standard "(001.003)" Standard Disk
*Font StempelGaramond-Italic: Standard "(001.003)" Standard Disk
*Font StempelGaramond-Roman: Standard "(001.003)" Standard Disk
*Font Symbol: Special "(001.008)" Special Disk
*Font Tekton: Standard "(001.002)" Standard Disk
*Font Times-Bold: Standard "(003.000)" Standard Disk
*Font Times-BoldItalic: Standard "(003.000)" Standard Disk
*Font Times-Italic: Standard "(003.000)" Standard Disk
*Font Times-Roman: Standard "(003.000)" Standard Disk
*Font TimesNewRomanPS-BoldItalicMT: Standard "(001.003)" Standard Disk
*Font TimesNewRomanPS-BoldMT: Standard "(001.003)" Standard Disk
*Font TimesNewRomanPS-ItalicMT: Standard "(001.003)" Standard Disk
*Font TimesNewRomanPSMT: Standard "(001.003)" Standard Disk
*Font Univers-Bold: Standard "(001.004)" Standard Disk
*Font Univers-BoldExt: Standard "(001.001)" Standard Disk
*Font Univers-BoldExtObl: Standard "(001.001)" Standard Disk
*Font Univers-BoldOblique: Standard "(001.004)" Standard Disk
*Font Univers-Condensed: Standard "(001.003)" Standard Disk
*Font Univers-CondensedBold: Standard "(001.002)" Standard Disk
*Font Univers-CondensedBoldOblique: Standard "(001.002)" Standard Disk
*Font Univers-CondensedOblique: Standard "(001.003)" Standard Disk
*Font Univers-Extended: Standard "(001.001)" Standard Disk
*Font Univers-ExtendedObl: Standard "(001.001)" Standard Disk
*Font Univers-Light: Standard "(001.004)" Standard Disk
*Font Univers-LightOblique: Standard "(001.004)" Standard Disk
*Font Univers-Oblique: Standard "(001.004)" Standard Disk
*Font Univers: Standard "(001.004)" Standard Disk
*Font Wingdings-Regular: Special "(002.000)" Special Disk
*Font ZapfChancery-MediumItalic: Standard "(003.000)" Standard Disk
*Font ZapfDingbats: Special "(002.000)" Special Disk

*?FontQuery: "
 save
   { count 1 gt
      { exch dup 127 string cvs (/) print print (:) print
        /Font resourcestatus {pop pop (Yes)} {(No)} ifelse =
      } { exit } ifelse
   } bind loop
   (*) = flush
 restore"
*End
*?FontList: "
save
  (*) {cvn ==} 128 string /Font resourceforall
  (*) = flush
restore"
*End

*%  ************************************************************************
*% 
*%  Last Edit Date:  03-05-2003  Kurt Pfeifle (-kp-), DANKA Europe Ltd.
*%  End of PPD file for DANKA PostScript Merge Filter
*% 
*%  ************************************************************************
*%             E N D    O F    P P D
*%  ************************************************************************
